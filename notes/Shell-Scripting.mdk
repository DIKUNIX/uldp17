# Shell Scripting

One useful aspect of a Unix-like environment is the ease of turning manual
workflows into automated scripts.  If you find yourself typing some specific
sequence of commands frequently, you can put them in a file (e.g.,
`myscript.sh`), and run it:

```
~$ bash myscript.sh
```

This will cause the contents of the script to be executed just as if you had
typed it yourself.  (Actually, there are some exotic differences — primary
among these is that using `cd` in the script will not have an effect once the
script ends.)  The `.sh` extension is irrelevant to the operating system — you
can call it whatever you want and it will still work.

If you want to make your script feel even more like an ordinary
program, there are two things you must do:

1.  You should add a *shebang* as the first line of the file:

    ```
    #!/usr/bin/env bash
    ```

    A shebang tells the operating system what kind of code is contained in the
    file[^ShebangWindows].  In this case, we tell it to execute it using whatever
    `sh` maps to in our current environment (equivalent to typing `sh` in the
    terminal).

    [^ShebangWindows]: Windows is not fond of shebangs, and instead relies on the
        filename extension.

2.  You should mark the file as *executable*, or else the operating
    system will refuse to start it.  This can be done with the `chmod`
    command:

    ```
    ~$ chmod +x myscript.sh
    ```

Now we can launch the script without explicitly invoking `sh`, just by
passing the path to the script:

```
~$ ./myscript.sh
```

In this case, the path indicates the current directory, but if the
script was somewhere else, we could run it as:

```
~$ ~/scripts/myscript.sh
```

If you want to be able to run the script just by typing `myscript.sh`,
you must add its containing directory to the `$PATH` environment
variable. We will cover this in the next section.

### Exercises

Write a shell script for each of the following. Latter scripts can (and
probably should) refer to earlier scripts.

1. List the IP addresses that accessed the server.

2. Count how many times each unique IP address occurred.

3. Get the requests made (supposedly) from Firefox.

4. Get the IP addresses of Firefox all (supposed) users.

5. Replace the dates as we did above.

## Environment

When you run a shell script using the `bash` program, what really happens is
that a fresh instance of the `bash` shell is spawned, and the shell script is
executed in the context of *that* shell.

This means, for example, that executing a `cd` command in the shell script has
no effect on your current environment:

```
~$ pwd
/home/alis/
~$ cat myscript.sh
cd Continents
~$ bash myscript.sh
~$ pwd
/home/alis/
```

There is another way to execute shell scripts which *does* enable the shell
script to influence the outside execution environment. This is achieved with
the `source` built-in:

```
~$ source myscript.sh
~/Continents$ pwd
/home/alis/
```

When we use `bash`, we say that the shell script is executed in a *subshell*,
whereas with `source` it is executed in the current shell environment. This
distinction will also play a role as we discover how to define functions in
shell scripts.

The more frequent use of source is indeed to modify the execution environment.
For instance, to set up an environment as you log in on a machine, or as you
start up a fresh instance of the shell. We will return to use `source` at the
end of this section.

It is easy to declare variables in the shell:

```
~$ foo=bar
```

These can be referred back to using `$`, followed by the variable name:

```
~$ echo $foo
bar
```

In more exotic cases, for instance if you want to use a variable as part of a
longer text, it is best to surround the variable name in curly braces:

```
~$ echo $foobaz

~$ echo ${foo}baz
barbaz
```

Variables are alive for the lifetime of the shell.

Unfortunately, they are not also passed on to subshells, unless you explicitly
mark them for `export`:

```
~$ bash
~$ echo $foo

~$ exit
~$ export foo
~$ bash
~$ echo $foo
bar
~$ exit
```

First, we introduce some *environment variables*. Environment variables are
global variables, conventionally spelled out in all caps.

For instance, there is a variable `HOME` that has a path to your `HOME`
directory as a value:

```
~$ echo $HOME
/home/alis
```

Similarly, there is a variable `PATH` which is a colon-separated list of
directories that your shell searches for a program that corresponds to your
command:

```
~$ echo $PATH
/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
```

If your shell script (e.g., `myscript.sh`) was in one of these directories, you
could've simply executed it as follows:

```
~$ myscript.sh
```

Unfortunately, you do not have permissions to write to any of these
directories. You do however, have permissions to overwrite the `PATH`
environment variable, and include one of the directories under your home
directory.

As you *append* a path to your `PATH` environment variable, you should be very
careful not to *overwrite* the `PATH` environment variable, as this will likely
render your shell unusable (until you manage to spawn another shell).

This an excellent chance to see how variables work in general:

```
~$ oldpath=$PATH
~$ echo $oldpath
/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
~$ echo $PATH
/usr/bin:/bin:/usr/sbin:/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin
```

We are now safe to overwrite `PATH`, as we have a backup if something goes
wrong:

```
~$ PATH=$PATH:$HOME/scripts
~$ myscript.sh
```

When you log in, your shell (i.e,, `bash`) reads the files `.profile` and
`.bash_profile` in your home directory. Add the above line, modifying the
`PATH` environment variable, to either of these files to make sure that `bash`
does this every time you log in.

When you start a new instance of your shell, `bash` reads the file `.bashrc`.
It is important that the code in `.bashrc` is reentrant.

### Exercises

1. Make `bash` add `~/scripts` to your `PATH` environment variable on login.
2. How can you test that your change works, without logging out and in again?
3. Why shouldn't you set your `PATH` in your `.bashrc`?

## Basic Control Flow

Copying commands into a file is a good starting point, but shell scripting
first becomes a truly powerful tool when you add *control flow* (conditionals
and branches) to your scripts.  While much less powerful than a conventional
programming language, a shell script is a convenient way to automate workflows
that involve Unix-like programs.

In fact, control flow is so esoteric in shell scripting that many users resort
to Unix-like utilities to achieve something comparable to higher-order
functional programming (e.g., `find` with the `-exec` argument, which we will
cover later).

First, it is important to understand the notion of an *exit code*.
Every program and shell command finishes by returning a number in the
interval 0 to 255.  By default, this number is not printed, but it is
stored in the *shell variable* `$?`.  For example, we can attempt to
`ls` a file that does not exist:

```
~$ ls /foo/bar
ls: cannot access /foo/bar: No such file or directory
```

To print the exit code of the above command, we echo the `$?` variable:

```
~$ echo $?
2
```

By convention, the exit code 0 means "success", and other exit codes
are used to indicate errors.  In this case, it seems that `ls` uses
the exit code `2` to indicate that the specified file does not exist.
It may use a different exit code if the file exists, but you do not
have permission to view it.

Note what happens if we check the `$?` variable again:

```
~$ echo $?
0
```

The exit code is now 0!  This is because the variable `$?` is overwritten every
time we run a command.  In this case, it now contained the exit code of our
first `echo` command, which completed succesfully.  It is often a good idea to
save away the value of `$?` in some other shell variable, as most commands will
overwrite `$?`.

Typically, we are not much concerned with the specific code being
returned — we only care whether it is 0 (success) or anything else
(failure).  This is also how the shell `if`-`then`-`else` construct
operates.  For example:

```
~$ if ls /foo/bar ; then echo ':-)'; else echo ':-('; fi
ls: cannot access /foo/bar: No such file or directory
:-(
~$ if ls /dev/null ; then echo ':-)'; else echo ':-('; fi
/dev/null
:-)
```

The semicolons are necessary to indicate where the arguments to `echo`
stop.  We could also use a line break instead.

### A Simple Testing Program

Let us try to write a simple practical shell script.  We want to
create a program, `utest.sh`, that is invoked as follows:

```
~$ sh utest.sh prog input_file output_file
```

`utest.sh` will execute the program `prog` and feed it input from
`input_file`.  The output from `prog` will be captured and compared to
`output_file`, and if it differs, `utest` will complain.  Essentially,
we are writing a small testing tool that is used to test whether some
program, given some input, produces some specific output.  You could
use it to create tests for the log file analysis scripts you wrote
previously.

I will go through `utest.sh` line by line.  Some new concepts will be
introduced as necessary.

```
#!/usr/bin/env sh
```

First we have the shebang.  While not strictly necessary, it is good
style.

```
if test $# -lt 3; then
  echo "Usage: <program> <input> <output>"
  exit 1
fi
```

The *number* of arguments given to the script is stored in the
variable `$#`.  We use the `test` program to check whether it is
less than (`-lt`) 3.  If so, we complain to the user and exit with a
code indicating error.

```
program=$1
input=$2
output=$3
```

The arguments to the script are stored in variables named `$n`, where `n` is a
number.  Using such ill-descriptive names is a sure way to encrypt your
shell-script. We create new variables with more descriptive names for holding
the arguments.

```
if ! ($program < $input | cmp $output /dev/stdin); then
    echo 'Failed.'
fi
```

A lot of things are happening here.  Let's take them one by one.

```
$program < $input
```

This runs the program stored in the variable `$program` with input
from the file named by the variable `$input`.

```
($program < $input | cmp $output /dev/stdin)
```

We pipe the output of `$program` into the `cmp` program.  At its most
basic operation, the `cmp` program takes two files as arguments, and
prints in-how-far they differ.  In this case, the first file is `$output`
(remember, the file containing *expected* output), as well as the
special pseudo-file `/dev/stdin`, which corresponds to the input read
from the pipe. 

```
if ! ($program < $input | cmp $output /dev/stdin); then
    echo 'Failed.'
fi
```

The entire pipeline is wrapped in parentheses and prefixed with `!`.
The `!` simply inverts the exit code of a command - this is because
`cmp` returns 0 ("true") if the files are *identical*, while we want
to enter the branch if they are *different*.

### Exercises

1. Turn your command lines for the previous set of exercises into shell scripts.

2. Use `utest.sh` to test your shell scripts.

3. Write a master test script that automatically runs `utest.sh` on
all your scripts and their corresponding input-output files.

4. Learn about shell script `while`-loops and the `shift` command, and
write a version of `utest.sh` called `mtest.sh` that can operate on
any number of test sets.  The script should take as argument the
program to test, followed by input-output file pairs. For instance,

    ```
    ~$ ./mtest.sh prog in.1 out.1 in.2 out.2
    ```

## `PATH`

Previously, you learned how we can use `which` and `file` to find the concrete
executable behind a shell command. To make your shell scripts feel as native as
other shell commands, you should add the directory containing those
(executable) shell scripts to your `PATH` environment variable.

One way to do this is to do this in your `~/.profile`. This file is loaded by
most shells _upon login_. That is, after modifying this file, it is best you
log out and log in again.

For instance, to add your home directory to your `PATH`, add the following line
at the end of your `~/.profile`:

```
export PATH="$HOME:$PATH"
```

The directories are separated by `:` in `PATH`, whole `$HOME` and `$PATH` are
shell variables for your home directory and current `PATH` environment
variable. The `export` qualifier makes sure to export this change to your
environment variables which persist after `~/.profile` is read.

Remember to log out and log in again to see the changes applied. Now you should
be run shell scripts in your home directory from anywhere, and without
prefixing them with `./`, or more treacherous paths.


## Exercise Series: `tmpdir`

Many programs need some sort of "scratch-space". In such contexts, it would be
useful to have a `tmpdir` utility which creates a temporary directory, runs a
given program to completion, and deletes the temporary directory in the end.

The section below describes the `mktemp` utility, a standard utility for
creating temporary directories and files. See this first.

Write a shell script, `tmpdir`, which when executed as follows:

```
~$ tmpdir a b c
```

Does the following:

1. Create a temporary directory with the template `/tmp/mytempdir-XXXXXX`.
2. `cd` into that directory.
3. Execute `a b c`.
4. `cd` back to the original working directory.
5. Remove the temporary directory, without regard for its contents.

_Hint:_ Use a subshell to get the current working directory.

For instance, the following showcases how the temporary directory only persists
for the duration of the `tmpdir` command:

```
~$ tmpdir pwd
/tmp/mytempdir-oFyIZZ
$ file /tmp/mytempdir-oFyIZZ
...: cannot open `/tmp/mytempdir-oFyIZZ' (No such file or directory)
```

Next, try a variation, so that when executed as follows:

```
~$ tmpdir a b c
```

`tmpdir` does the following:

1. Create a temporary directory with the template `/tmp/mytempdir-XXXXXX`.
2. Execute `a b c TMPDIR`, where `TMPDIR` is the path to the above directory.
3. Remove the temporary directory, without regard for its contents.

For instance,

```
~$ tmpdir echo The tempdir is
The tempdir is /tmp/mytempdir-zGPMAL
```

Next, try another variation, so that when executed as follows:

```
~$ tmpdir a b c
```

`tmpdir` does the following:

1. Create a temporary directory with the template `/tmp/mytempdir-XXXXXX`.
2. Execute `a TMPDIR b c`, where `TMPDIR` is the path to the above directory.
3. Remove the temporary directory, without regard for its contents.

For instance,

```
~$ tmpdir echo is the tempdir
/tmp/mytempdir-vDwq3e is the tempdir
```

_Hint:_ Use `shift`.

Last, but not least, try a variation combining all of the above. Let `tmpdir`
take one optional parameter, indicating which of the 3 above variations it
should perform. The options are as follows:

* `-c` - `cd` into the temporary directory before executing the command.
* `-#` - the path to the temporary directory is given as the last argument to
  the executed command.
* `-1` - the path to the temporary directory is given as the first argument to
  the executed command.

By default, if no argument is given, assume `-c`.

For instance,

```
~$ tmpdir -c pwd
/tmp/mytempdir-udBkJX
~$ tmpdir -# echo The tempdir is
The tempdir is /tmp/mytempdir-IjvJPf
~$ tmpdir -1 echo is the tempdir
/tmp/mytempdir-8VmA46 is the tempdir
~$ tmpdir pwd
/tmp/mytempdir-gcpAc8
```

## `mktemp`

The `mktemp` utility can be used to create a temporary file or directory. Since
many such files or directories may exist under any given directory, `mktemp`
takes a template intended for an application specific path, and filename prefix
and suffix.

For instance, to create a temporary file in the current working directory:

```
~$ mktemp testing-mktemp-XXXX
testing-mktemp-Omrx
$ file testing-mktemp-Omrx 
testing-mktemp-Omrx: empty
```

To create a directory, pass in the `-d` option:

```
~$ mktemp -d testing-mktemp-XXXX
testing-mktemp-7vPK
~$ file testing-mktemp-7vPK
testing-mktemp-7vPK: directory
```

A typical place to put temporary files and directories under the `/tmp/`
directory on a Unix-like system. This is the typical "mount-point" of a `tmpfs`
filesystem, i.e. a filesystem dedicated to temporary storage. Such a filesystem
is often in-memory only, and so temporary files and directories are never
stored on disk, and are purged upon reboot.

### Exercises

1. Create a temporary directory under `/tmp/` using `mktemp`. Delete it.
